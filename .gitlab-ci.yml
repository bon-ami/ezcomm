# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: golang:latest

# docker run -it golang

stages:          # List of stages for jobs, and their order of execution
  - test
  - build
#  - deploy

before_script:
  - echo "Preparing tools..."
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes golang gcc libgl1-mesa-dev xorg-dev xz-utils gcc-mingw-w64-x86-64 unzip apksigner

build-job:
  stage: build
  variables:
    SECURE_FILES_DOWNLOAD_PATH: "./"
  script:
    - echo "Preparing tools..."
    - go install fyne.io/fyne/v2/cmd/fyne@latest
    - go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
    - wget https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
    #- wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
    - unzip android-ndk-r25c-linux.zip
    #- unzip commandlinetools-linux-9477386_latest.zip
    #- pwd; ls android-ndk-r25c #; ls commandlinetools-linux-9477386_latest
    - export ANDROID_NDK_HOME="${PWD}/android-ndk-r25c"
    - echo "Getting secure files..."
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
#    - ls -a
    - echo "Compiling the code..."
    - "./build.sh ${CI_COMMIT_TAG}"
  artifacts:
    paths:
    - EZComm_cmd
    - EZComm_cmd.exe
    - EZComm
    - EZComm_debug
    - EZComm.exe
    - EZComm_debug.exe
    - EZComm.apk
    - EZComm_debug.apk

unit-test-job:
  stage: test
  script:
    - echo "Running unit tests..."
    - go test -cover ./...
    #- go test -cover

lint-test-job:
  stage: test
  script:
    - echo "Cycloning code... "
    #- go vet ./...
    #- go install golang.org/x/lint/golint@latest
    #- golint -set_exit_status $(go list ./...)
    - go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
    #- golangci-lint run
    - gocyclo -over 30 .

variables:
  GOLANGCI_LINT_VERSION: 'v1.61.0'
  #GOLANGCI_LINT_VERSION: 'v1.56.2'
lint:
  image: golangci/golangci-lint:$GOLANGCI_LINT_VERSION
  stage: test
  script:
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - echo "Linting code... "
    - golangci-lint run --timeout 10m --issues-exit-code 1 --print-issued-lines=false --out-format code-climate:gl-code-quality-report.json,line-number
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

#sast:
  #stage: test
include:
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml
  - template: Jobs/SAST.latest.gitlab-ci.yml
  #- template: Jobs/SAST.gitlab-ci.yml
  #- template: Security/SAST.gitlab-ci.yml

#deploy-job:
#  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  environment: production
#  script:
#    - echo "Deploying application..."
#    - echo "Application successfully deployed."
